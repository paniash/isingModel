# -*- coding: utf-8 -*-
"""1d_lattice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zyZdYCHGSI-6TRhoMcmYGdB8e5XqfLOZ
"""

#1d ising model at a very hi temperature
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model

#fn to return the energy of our lattice
def energy(l):
    e=0
    j=1
    #our energy assumes periodic boundary conditions
    for i in range(l.size-1):
        
        e+=-j*l[i]*(l[i-1]+l[i+1])
    
    e+=-j*l[l.size-1]*(l[l.size-2]+l[0])
    
    return e

#length of our lattice
d=50
#no of 1d ising models
#n=2440
for n in [250,800,1700,2000,4000,5000]:
  #defining our lattice
  l=np.random.choice([-1, 1], size=(n,d))

  #array to store the labels
  label=np.zeros(n)

  #creating the labels
  for i in range(n):
      label[i]=energy(l[i])

  #partition of our training n testing sets
  m=int(7*n/10)

  train=l[:m]
  test=l[m:]

  train_label=label[:m]
  test_label=label[m:]

  #data generated!!

  #setting up our ML algos
  leastsq=linear_model.LinearRegression()
  ridge=linear_model.Ridge()
  lasso = linear_model.Lasso()

  #needed for training the data: computing the outer product of S_i
  train_states=np.einsum('...i,...j->...ij', train, train)
  shape=train_states.shape

  #each row is a reshaped from a 5x5 matrix of S_i*S_j
  train_states=train_states.reshape((shape[0],shape[1]*shape[2]))

  #needed for training the data: computing the outer product of S_i
  test_states=np.einsum('...i,...j->...ij', test, test)
  shape=test_states.shape

  #each row is a reshaped from a 5x5 matrix of S_i*S_j
  test_states=test_states.reshape((shape[0],shape[1]*shape[2]))

  leastsq.fit(train_states, train_label)
  J=leastsq.coef_.reshape((shape[1],shape[2]))

  mark1=leastsq.score(train_states,train_label)*100
  mark2=leastsq.score(test_states,test_label)*100

  print("n: %s"%n,"train-test: ",m,'-',n-m)
  print("Training score: %s /100"%mark1)
  print("Testing score: %s /100"%mark2,'\n')

  plt.figure()
  plt.title('n=%s'%n)
  c=plt.imshow(J,vmin=-1, vmax=1,cmap='Spectral_r',interpolation='nearest', origin='lower')
  plt.colorbar(c)
